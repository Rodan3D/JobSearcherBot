import telebot
from telebot import types

from add_key_and_exclude_words import (
    get_popular_excluded_words_from_database,
    get_popular_keywords_from_database,
)
from api_hh import HH_API
from config import TELEGRAM_TOKEN
from logger import logger

# –ó–∞–º–µ–Ω–∏—Ç–µ 'TELEGRAM_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ config.py
bot = telebot.TeleBot(TELEGRAM_TOKEN)
# –°–æ–∑–¥–∞–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä HH_API
hh_api = HH_API()
# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
waiting_for_keyword = {}
# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
waiting_for_city = {}


@logger.catch
def create_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞.

    Returns:
       types.ReplyKeyboardMarkup: –†–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    item_help = types.KeyboardButton("–ü–æ–º–æ—â—å üÜò")
    item_search = types.KeyboardButton("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π ‚öôÔ∏è")
    item_info = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è")
    markup.add(item_help, item_search, item_info)
    return markup


@logger.catch
@bot.message_handler(commands=["start"])
def start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    markup = create_markup()
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!".format(message.from_user),
        reply_markup=markup,
    )


@logger.catch
@bot.message_handler(
    func=lambda message: message.text == "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π ‚öôÔ∏è"
    or message.text == "/main"
)
def search(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π ‚öôÔ∏è" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_input_keyword = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
    item_search_vacancy = types.KeyboardButton("–ü–æ–∏—Å–∫ üîé")
    item_exclude_word = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
    item_popular_keywords = types.KeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
    item_popular_excluded_words = types.KeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è")
    item_back = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(
        item_input_keyword,
        item_search_vacancy,
        item_exclude_word,
        item_popular_keywords,
        item_popular_excluded_words,
        item_back,
    )
    bot.send_message(
        message.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π üîé", reply_markup=markup
    )


@bot.message_handler(
    func=lambda message: message.text == "–ü–æ–∏—Å–∫ üîé" or message.text == "/search"
)
@logger.catch
def search_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–∏—Å–∫ üîé" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    try:
        vacancies = hh_api.search_vacancies()
        if vacancies:
            response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:\n\n"
            for vacancy in vacancies:
                response += f"{vacancy['name']}\n"
                response += f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {hh_api.format_salary(vacancy['salary'])}\n"
                response += f"–ì–æ—Ä–æ–¥: {(vacancy['area']['name'])}\n"
                response += f"{vacancy['alternate_url']}\n\n"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@logger.catch
@bot.message_handler(
    func=lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
    or message.text == "/input_key"
)
def input_keyword(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ" –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, set_new_keyword)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_keyword[message.chat.id] = True


@logger.catch
def set_new_keyword(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    new_keyword = message.text
    hh_api.input_keyword(new_keyword)
    bot.send_message(message.chat.id, f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: {new_keyword}")
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    waiting_for_city[message.chat.id] = False
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞
    set_city(message)


@logger.catch
def set_city(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, set_new_city)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_city[message.chat.id] = True


@logger.catch
def set_new_city(message):
    """
    –ü–æ–¥—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    city = message.text
    hh_api.input_area(city)
    bot.send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞: {city}")
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    waiting_for_keyword[message.chat.id] = False
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    search_command(message)


@logger.catch
@bot.message_handler(
    func=lambda message: message.text == "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
    or message.text == "/popular_keywords"
)
def popular_keywords(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
       message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    keywords = get_popular_keywords_from_database()
    if keywords:
        response = "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n"
        for keyword in keywords[:5]:
            response += f"*{keyword}*\n"
        bot.send_message(message.chat.id, response, parse_mode="MARKDOWN")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")


@logger.catch
@bot.message_handler(
    func=lambda message: message.text == "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è"
    or message.text == "/popular_excluded_words"
)
def popular_excluded_words(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤-–∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
       message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    excluded_words = get_popular_excluded_words_from_database()
    if excluded_words:
        response = "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è:\n\n"
        for word in excluded_words[:5]:
            response += f"*{word}*\n"
        bot.send_message(message.chat.id, response, parse_mode="MARKDOWN")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤-–∏—Å–∫–ª—é—á–µ–Ω–∏–π.")


@logger.catch
@bot.message_handler(
    func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ"
    or message.text == "/exclude_key"
)
def add_exclude_words(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ:")
    bot.register_next_step_handler(message, set_exclude_keyword)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_keyword[message.chat.id] = True


@logger.catch
def set_exclude_keyword(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    keyword_to_exclude = message.text
    hh_api.exclude_keywords(keyword_to_exclude)
    bot.send_message(
        message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {keyword_to_exclude}"
    )
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    waiting_for_city[message.chat.id] = False
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞
    set_city(message)


@logger.catch
@bot.message_handler(
    func=lambda message: message.text == "–ü–æ–º–æ—â—å üÜò" or message.text == "/help"
)
def help_bot(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    bot.send_message(
        message.chat.id,
        "`/start` - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
        "`/help`  - –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n"
        "`/main` - –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π\n"
        "`/input_key` - –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "`/exclude_key` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ\n"
        "`/popular_keywords` - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "`/popular_excluded_words` - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è\n"
        "`/info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        parse_mode="MARKDOWN",
    )


@logger.catch
@bot.message_handler(
    func=lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è" or message.text == "/info"
)
def about_info(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_about = types.KeyboardButton("–û –±–æ—Ç–µ üíæ")
    item_contact = types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû")
    item_back = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(item_about, item_contact, item_back)
    bot.send_message(
        message.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è", reply_markup=markup
    )


@logger.catch
@bot.message_handler(func=lambda message: message.text == "–û –±–æ—Ç–µ üíæ")
def about_info(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    bot.send_message(
        message.chat.id,
        '–Ø –±–æ—Ç-–Ω–∞—Å—Ç—Ä–æ–π—â–∏–∫ –ø–æ "—É–∑–∫–æ–º—É" –ø–æ–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å–∞–π—Ç–µ HeadHunter. –ü–æ–¥ '
        '"—É–∑–∫–∏–º" –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è –±–µ–∑ –≤—Å—è–∫–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ –º—É—Å–æ—Ä–∞',
    )


@logger.catch
@bot.message_handler(func=lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû")
def contacts_info(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    bot.send_message(message.chat.id, "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º : https://t.me/Rodan3D")


@logger.catch
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
def back(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–≤–∑—Ä–∞—Ç–∞ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    markup = create_markup()
    bot.send_message(
        message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup
    )


@logger.catch
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        message (telebot.types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    """
    bot.send_message(
        message.chat.id,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å ü§∑‚Äç‚ôÇÔ∏è. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ "
        "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞"
        '–∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å üÜò"',
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–Ø –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception:
            pass
